#+AUTHOR: Tasos Fragkopoulos
#+TITLE: Εργασία Εξαμήνου Μαθηματικό Λογισμικό
#+OPTIONS: tex:dvipng
#+Startup: latexpreview

* Εργασία Εξαμήνου Μαθηματικό Λογισμικό

** Άσκηση 1

*** Μέθοδος Επίλυσης

Για να λύσουμε την άσκηση θα πρέπει αρχικά να βρούμε τις ακτίνες κάθε κύκλου. Έστω κύκλοι A, B, C με κέντρα $(x_1, y_1), (x_2, y_2), (x_3, y_3)$ και ακτίνες $R_1, R_2, R_3$ αντοίστοιχα, όπως φαίνεται στην εικόνα παρακάτω.

#+ATTR_HTML: width="300px"
#+ATTR_ORG: :width 300
[[./ask1/outputImage.jpg]]

Ξέρωντας τα αυτά η απόσταση μεταξύ κάθε κέντρου θα είναι:

#+BEGIN_CENTER
    $AB = R_1 + R_2$

    $AC = R_1 + R_3$

    $BC = R_2 + R_3$
#+END_CENTER

Μπορούμε να λύσουμε για $R_1, R_2, R_3$ και να βρούμε ότι:

#+BEGIN_CENTER
    $R_1 = \frac{AB + AC - BC}{2}$

    $R_2 = \frac{AB - AC + BC}{2}$

    $R_1 = \frac{-AB + AC + BC}{2}$
#+END_CENTER

Επιπλέων ξέρουμε οτι:

#+BEGIN_CENTER
    $AB = \sqrt{(x_2 - x_1)^2 + (y_2 - y_1)^2}$

    $AC = \sqrt{(x_3 - x_1)^2 + (y_3 - y_1)^2}$

    $BC = \sqrt{(x_3 - x_2)^2 + (y_3 - y_2)^2}$
#+END_CENTER

Έτσι υπολογίζοντας αρχικά τα $AB, AC, BC$ και κάνοντας τις πράξεις θα βρούμε τα $R_1, R_2, R_3$

*** Επίλυση στο Matlab

Η βασική επίλυση του προβλήματος γίνεται στο αρχείο =drawCircles.m= που έχει δύο συναρτήσεις, την =drawCircles(x, y)= και την =circle(x, y, r)=. Επίσης υπάρχει το αρχείο =example.m= που τρέχει την συνάρτηση =drawCircles= με x, y τις τιμές που δώθηκαν απο την εκφώνηση ως παράδειγμα, την χρονομετρεί με την χρήση της συνάρτησης =timeit()= του Matlab και εκτυπώνει τον χρόνο.

Στη συνάρτηση =drawCircles(x, y)= αρχικά υπολογίζουμε τις τιμές AB, AC, BC.

#+BEGIN_SRC matlab
AB = sqrt((x(2) - x(1))^2 + (y(2) - y(1))^2);
AC = sqrt((x(3) - x(1))^2 + (y(3) - y(1))^2);
BC = sqrt((x(3) - x(2))^2 + (y(3) - y(2))^2);
#+END_SRC

Ένας άλλος τρόπος να τις υπολογίσουμε θα ήταν να χρησιμοποιήσουμε την συνάρτηση =norm()=.

Στην συνέχεια φτιάχνουμε ενα διάνυσμα R, στο οποίο θα βάλουμε τις τιμές των $R_1, R_2, R_3$ που θα υπολογίσουμε.

#+BEGIN_SRC matlab
R = [];
R(1) = ( AB + AC - BC)/2;
R(2) = ( AB - AC + BC)/2;
R(3) = (-AB + AC + BC)/2;
#+END_SRC

Τέλος κάνουμε plot τις ακμές του τριγώνου και τους κύκλους. Για τους κύκλους θα χρησιμοποιούμε την βοηθητική συνάρτηση =circle(x, y, r)= που βρίσκεται στο ίδιο αρχείο. Παίρνει ως ορίσματα τις συντεταγμένες (x, y) του κέντρου του κύκλου και το μήκος της ακτίνας του r και κάνει plot τον κάθε κύκλο.

#+BEGIN_SRC matlab
function circle(x, y, r)
% CIRCLE - This function plots a circle centered at (x, y) with radius r.
%   The input arguments x, y and r are the x and y-coordinates of the center of the circle and its radius, respectively.
%   The function calculates the x and y-coordinates of 50 points evenly spaced around the circumference of the circle,
%   using the parametric equation of a circle. The function then plots the circle using the 'plot' function.

    th = 0:pi/50:2*pi;         % Theta range for 50 points
    xunit = r * cos(th) + x;   % x-coordinates of 50 points on circle
    yunit = r * sin(th) + y;   % y-coordinates of 50 points on circle
    plot(xunit, yunit);        % Plot the circle
end
#+END_SRC
Σε αυτή ορίζουμε το διάνυσμα th που έχει τις τιμές από 0 μέχρι $2\pi$ με βήμα $\frac{\pi}{50}$ και μετά υπολογίζουμε τις x και y συντεταγμένες του κύκλου στις xunit και yunit αντίστοιχα.

** Άσκηση 2

*** Επίλυση στο Matlab

Ο υπολογισμός του e με τον τύπο
#+BEGIN_CENTER
$e = \lim_{n\rightarrow \infty}(1 + \frac{1}{n})^{n}$
#+end_center
γίνεται στο *matlab* με την ακόλουθη επανάληψη:

#+begin_src matlab
while(abs(em - e) > tol)
    e = (1 + 1/n)^n;     % approximate e using formula
    n = n * 2;           % double the value of n in each iteration
    count = count + 1;   % increment the iteration count
end
#+end_src

Η λούπα τρέχει όσο η απόλυτη διαφορά του e που υπολογίζουμε με του em (που είναι το e που δίνεται απο το matlab matlab =em = exp(1)=) είναι μεγαλύτερη του tol που είναι η ακρίβεια που θέλουμε που βγαίνει από =tol = 10^-(l + 1)=.
Το n διπλασιάζεται σε κάθε, επανάληψη που είναι πολύ πιο αποτελεσματικό από την αύξηση του κατά ένα.

Αποτέλεσμα συνάρτησης με διπλασιασμό n:
#+begin_src matlab
>> approximate(9)
matlab's number: 	2.718281828459
approximated number: 	2.718281828380
accuracy to point: 	          ^
number of iterations: 	35
#+end_src

Αποτέλεσμα συνάρτησης με αύξηση n κατα ένα:
#+begin_src matlab
>> approximate(9)
matlab's number: 	2.718281828459
approximated number: 	2.718281828360
accuracy to point: 	          ^
number of iterations: 	66953800
#+end_src

*** Προβλήματα με την άσκηση

Το πρόβλημα με την συνάρτηση αυτή είναι ότι δεν δουλεύει για =l > 15=. Αυτό συμβαίνει γιατί το n γίνεται πολύ μεγάλο και έτσι το =1/n= είναι τόσο μικρό που το *Matlab* στην πρόσθεση του με το 1 αγνοεί τα δεκαδικά, με αποτέλεσμα το e να γίνει 1.

Μια λύση για να αντιμετοπίσουμε το πρόβλημα αυτό είναι να χρησιμοποιήσουμε την συνάρτηση =vpa()= του [[https://www.mathworks.com/help/symbolic/][*Symbolic Math Toolbox*]] για να κάνουμε την πράξη. Βέβαια κάνει την συνάρτηση πολύ πιο αργή.

Ο πιο αποτελεσματικός τρόπος είναι να χρησιμοποιήσουμε τον τύπο:
#+BEGIN_CENTER
$\Large e = \sum_{n = 0}^{\infty} \frac{1}{n!}$
#+END_CENTER
για να υλοποιήσουμε την συνάρτηση.

Στο αρχείο  =fasterApproximation.m= υλοποιήται αυτος ο τύπος και μπορεί να υπολογίσει μέχρι 50 δεκαδικά του e με 19 επαναλήψεις.

** Άσκηση 3

*** Μέθοδος Επίλυσης

Για την λύση του προβλήματος αυτού θα χρειαστούμε να φτιάξουμε αρχικά ενα διάνυσμα 26 θέσεων. Κάθε θέση του διανύσματος θα αντιπροσοπεύει ένα γράμμα του λατινικού αλφαβήτου και θα περιέχει το πλήθος εμφάνισης του.

Θα το αρχηκοποιήσουμε με μηδενικά
#+BEGIN_SRC matlab
alphabet = zeros(1, 26);
#+END_SRC

Έπειτα θα διατρέξουμε κάθε χαρακτήρα της ακολουθίας χαρακτήρων και θα ελέγχουμε αν η τιμή ascii του είναι μεταξύ του 65 - 90 ή 97 - 122. Μεταξύ του 65 - 90 είναι οι τα κεφαλαία γράμματ και του 97 - 122 είναι τα μικρά. Έτσι διασφαλίζουμε οτι αγνοούμε όλους τους άλλους χαρακτήρες. Αφού ελένξουμε τους χαρακτήρες κάνουμε την αναγκαία αφαίρεση για να βάλουμε τον κάθε χαρακτήρα στο διάνυσμα alphabet.

#+begin_src matlab
% Scan the input string `str`
for i = 1:strlength(str)

    % If a character in the string is between ASCII values 65 and 90 (upper case letters),
    % its count is increased in the `alphabet` array at the corresponding index (`str(i) - 64`).
    if(str(i) >= 65 && str(i) <= 90)
        alphabet(str(i) - 64) = alphabet(str(i) - 64) + 1;

    % If a character is between ASCII values 97 and 122 (lower case letters),
    % its count is increased in the `alphabet` array at the corresponding index (`str(i) - 96`).
    elseif (str(i) >= 97 && str(i) <= 122)
        alphabet(str(i) - 96) = alphabet(str(i) - 96) + 1;
    end
end
#+end_src

Τέλος διατρέχουμε το διάνυσμα alphabet και εκτυπώνουμε τα γράμματα και πόσες φορές εμφανίζονται.

#+begin_src matlab
% Output the number of occurrences of each letter in the string
for i = 1:26
    if(alphabet(i) ~= 0)
        fprintf("Found %c: %d times \n", (i+96), alphabet(i));
    end
end
#+end_src

Παράδειγμα χρήσης συνάρτησης για ακολουθία χαρακτήρων 'Hello World':
#+begin_src matlab
>> findOccurances('Hello World')
Found d: 1 times
Found e: 1 times
Found h: 1 times
Found l: 3 times
Found o: 2 times
Found r: 1 times
Found w: 1 times
#+end_src

** Άσκηση 4

*** Μέθοδος Επίλυσης

Για να φτιάξουμε το αυτόματο μηχάνημα πρέπει να κάνουμε τρία βασικά πράγματα σε ολό το πρόγραμμα:

    - Να εκτυπώσουμε στον χρήστη τις επιλογές που μπορεί να κάνει

    - Να διαβάσουμε την επιλογή αυτή

    - Να έχουμε κάποια λογική πάνω στις επιλογές του χρήστη

Οπότε θα χρειαστεί να τα εφαρμόσουμε για την επιλογή εισιτηρίου, την επιλογή αριθμού εισιτηρίων και την επιλογή κερμάτων για προσθήκη.

Αρχικά θα φτιάξουμε την επιλογή των εισιτηρίων. Θα έχουμε ένα =while loop= που θα τρέχει για πάντα και θα εκτυπώνει τα εισιτήρια που μπορεί να επιλέξει ο χρήστης, θα πέρνει την επιλόγη και θα ελέγχει αμα είναι έγκυρη για να σταματήσει. Διαφορετικά θα εκτυπώνει μήνυμα στο χρήστη για μη έγκυρη επιλογή και θα ξανα τρέχει.

#+begin_src matlab
% Get user's choice of ticket
while(1)
    % Output ticket options
    fprintf("(1): Standar  1.40€.\n");
    fprintf("(2): Discount 0.60€.\n");
    fprintf("(3): Daily    4.50€.\n");
    fprintf("(4): Weekly   9.00€.\n");

    % Get user's ticket choise
    ticketChoice = str2double(input('Choose your ticket from the list.(1 - 4): ', 's'));

    % Check if valid ticket choise
    if(ticketChoice >= 1 & ticketChoice <= 4)
        break;
    else
        % Output error if choise not valid
        fprintf("\nWrong option. Please choose one of this options:\n");
    end
end
#+end_src

Όταν πέρνουμε την επιλογή απο το χρήστη δήνουμε στην συνάρτηση =input()= ως δεύτερο όρισμα το 's' για να πάρει την είσοδο του χρήστη ως ακολουθία χαρακτήρων και να μην κάνει καμία πράξη με αυτή. Έπειτα χρησιμοποιούμε την =str2double()= για να κάνουμε την ακολουθία αριθμό.

Μετά θα κάνουμε κάτι παρόμοιο για να την επιλογή αριθμού εισιτηρίων.

#+begin_src matlab
% Get user's number of tickets
while(1)
    % Get user's choise
    numberOfTickets = str2double(input('How many tickets do you want? ', 's'));

    % Check if choise is valid
    if(numberOfTickets > 0)
        break
    else
        % Output error if choise not valid
        fprintf("\nNot a valid number of tickets. Please put a valid number.\n");
    end
end
#+end_src

Και παρόμοιο για την είσοδο των χρημάτων.

#+begin_src matlab
while(1)
    % Output price owed and available coins
    fprintf("You owe %.2f€. You can insert:\n", priceDifference);
    fprintf("\t(1): 10 euro note\n");
    fprintf("\t(2): 5 euro note\n");
    fprintf("\t(3): 2 euro coin\n");
    fprintf("\t(4): 1 euro coin\n");
    fprintf("\t(5): 50 cent euro coin\n");
    fprintf("\t(6): 20 cent euro coin\n");
    fprintf("\t(7): 10 cent euro coin\n");
    fprintf("\t(8): 5 cent euro coin\n");

    % Get user's inserted money
    moneyInserted = str2double(input('Choose money to insert.(1 - 8): ', 's'));

    % Check if choice is valid
    if(moneyInserted >= 1 & moneyInserted <= 8)
        priceDifference = round(priceDifference - money(moneyInserted), 2);

        if(~priceDifference)
            break;
        elseif(priceDifference < 0)
            fprintf("You inserted more money. Here's the difference:\n");
            priceDifference = - priceDifference;

            for i = 1:length(money)
                if(money(i) == priceDifference)
                    fprintf("\tYou got %.2f€.\n", money(i));
                    priceDifference = round(priceDifference - money(i), 2);
                    break;
                elseif(priceDifference > money(i))
                    fprintf("\tYou got %.2f€.\n", money(i));
                    priceDifference = round(priceDifference - money(i), 2);
                end
            end
            break;
        end
    else
        % Output error if choice not valid
        fprintf("\nWrong option. Please choose one of this options:\n");
    end
end
#+end_src

Πριν την επανάληψη αυτή, βρίσκουμε πόσα χρήματα χρωστάει ο χρήστης που βγαίνει από την τιμή του εισητιρίου επί τον αριθμό τους. Τις τιμές των εισιτηρίων και τα επιτρεπούμενα χρήματα τα έχουμε σε ένα διάνυσμα.

#+begin_src matlab
  % List of ticket prices
  tickets = [1.40 0.6 4.5 9];
  % List of accepted coins
  money = [10 5 2 1 0.5 0.2 0.1 0.05];

  % Find price user has to pay
  priceDifference =  tickets(ticketChoice) * numberOfTickets;
#+end_src

Για την τελευταία επανάληψη ελέγχουμε αν τα λεφτά που δώθηκαν είναι είναι ίσα με τα οφειλούμενα για να τελειώσουμε το πρόγραμμα. Αν είναι λιγότερα το πρόγραμμα ξανα τρέχει και ο χρήστης μπορεί να βάλει και άλλα χρήματα στο μηχάνημα. Αν βάλει περισσότερα τότε πρέπει το μηχάνημα να δώσει ρέστα. Οπότε διατρέχουμε το διάνυσμα με τα χρήματα από το μεγαλύτερο προς το μικρότερο. Αφαιρούμε από τα λεφτά που χρωστάει το μηχάνημα τα λεφτά της κάθε επανάληψης και ελέγχουμε αν είναι ίσα με το χρήμα της κάθε επανάληψης για να τελείωσει το πρόγραμμα ή αν είναι μεγαλύτερο για να συνεχίσει τις επαναλήψης.

Είναι σημαντικό να αναφαίρουμε πως κάθε φορά που κάνουμε αφαίρεση των χρημάτων χρησιμοποιούμε την συνάρτηση =round()= για στρογκυλοποιήσουμε στα δύο δεκαδικά γιατί οι πράξεις με δεκαδικούς στο *Matlab* δεν είναι ακριβείς και για αυτό δεν μπορούμε να πάρουμε μηδέν[1].

** Άσκηση 5

** Άσκηση 6

*** Μέθοδος Επίλυσης

Για να εφαρμόσουμε την μέθοδο ορθοκανονικοποιήσης Gram-Schmidt με κώδικα χρειάζεται απλά να εφαρμόσουμε τα βήματα του αλγορίθμου που δήνονται στην εκφώνηση και να υλοποιήσουμε τις μαθηματικές πράξεις που δήνονται.

Αρχικά θα χρειαστεί να αρχικοποιήσουμε τον πίνακα U, πού θα είναι το αποτέλεσμα της συνάρτησης, με μηδενικά. Οι διαστάσεις του θα είναι ίδιες με τον πίνακα V που πέρνουμε σαν είσοδο.

#+begin_src matlab
[m, n] = size(V);	% Get the dimensions of the input matrix V
U = zeros(m, n);	% Initialize the output matrix U with zeros
#+end_src

Κάθε στήλη του πίνακα V αποτελεί ένα διάνυσμα $a_1, a_2, a_3,...,a_n$. Το αντίστοιχο ισχύει για τον πίνακα U. Οπότε για το βήμα 1 του αλγορίθμου θα θέσουμε $u_1 = a_1$ έτσι:

#+begin_src matlab
U(:, 1) = V(:, 1);	% The first column of U is equal to the first column of V
#+end_src

Για το βήμα 2 θα έχουμε μία λούπα που σε κάθε επανάληψη θα υπολογίζει κάθε διάνυσμα. Θα τρέχει (n - 1) φορές γιατί έχουμε ήδη βρει το πρώτο διάνυσμα. Μέσα στην λούπα θα υλοποιήσουμε τον τύπο:
#+begin_center
$u_{i+1} = a_{i+1} - \sum_{k=1}^{i}\frac{\left \langle a_{i+1}, u_k \right \rangle}{\left \| u_k \right \|^2}u_k$
#+end_center

_*Σημείωση*_:Υπάρχει λάθος στον τύπο της εκφώνησης. Μέσα στο άθροισμα όλα τα u θα είναι τα u k. Αλλιώς θα προσθέτουμε i φορές το ίδιο πράγμα.[2]

Πρώτα θα υπολογίσουμε το εσωτερικό του αθροίσματος με την βοηθητική συνάρτηση =proj(v, u)=:

#+begin_src matlab
function [ res ] = proj(v, u)
% PROJ - This function calculates the projection of a vector 'v' onto another vector 'u'.
% Input:
%   v -> m x 1 vector in R^m
%   u -> m x 1 vector in R^m
%
% Output:
%   res - m x 1 vector, the projection of 'v' onto 'u'
%======================================================================================

    dotProduct = (v)'*u;	% Calculate the dot product of 'v' and 'u'
    normSquared = (u)'*u;	% Calculate the squared norm of 'u'
    
    % Calculate the projection of 'v' onto 'u'
    res = (dotProduct / normSquared) * u;
end
#+end_src

Για να υπολογίσουμε το εσωτερικό γινόμενο θα κάνουμε πολλαπλασιασμό αναστροφου πίνακα με πίνακα που είναι πολύ πιο αποτελεσματικό και γρήγορο από το να βρήσκαμε το άθροισμα όλων των γινομένων στοιχείων προς στοιχείο των δύο πινάκων. Αυτό γιατί οι ενσωματομένοι τελεστές ='= και =*= πινάκων είναι πιο αποτελεσματικοί[3].
Για το τετράγωνο της νόρμας του $u_i$ άμα κάνουμε τις απλοποιήσει μπορούμε να καταλήξουμε:
#+begin_center
$\left \| u_i \right \|^2 = \sqrt{u_1^2 + u_2^2 + ... + u_n^2}^2 = u_1^2 + u_2^2 + ... + u_n^2 = u \cdot u$
#+end_center
Άρα μπορούμε να βρούμε το εσωτερικό γινόμενο του u με το u με τον ίδιο τρόπο.
Τέλος στην συνάρτηση θα κάνουμε την διαίρεση μεταξύ τους και τον πολαπλασιασμό με το u και θα το επιστρέψουμε.

Επιστρέφοντας στην βασική συνάρτηση θα βρούμε το αθροισμα μέσω μίας επανάληψης απο k = 1 μέχρι i, όλο αυτο μέσα στην βασική επανάληψη που αναφέρθηκε παραπάνω.

#+begin_src matlab
% Loop through the remaining columns of V
for i=1:n-1
    s = 0; % Initialize the variable 's' to zero

    % Loop through the columns of U that have been computed so far
    for k = 1:i
        % Add the projection of V(:, i+1) onto U(:, k) to 's'
        s = s + proj(V(:, i+1), U(:, k));
    end

    % The next column of U is equal to the next column of V minus the projection
    U(:, i+1) = V(:, i+1) - s;
end
#+end_src

Στο τέλος κάθε επανάληψης θα κάνουμε την αφαίρεση του $a_{i+1}$ με το άθροισμα που υπολογίσαμε.

#+begin_src matlab
% The next column of U is equal to the next column of V minus the projection
U(:, i+1) = V(:, i+1) - s;
#+end_src

Εκτός απο το αρχείο =gramSchmidt.m= της βασικής συνάρτησης υπάρχει το αρχείο =example.m= που τρέχει την συνάρτηση με δοκιμαστική βάση $R^3$ που δήνεται από την εκφώνηση, καθώς και υπολογίζει των χρόνο που χρειάστηκε για να τρέξει μέσω της συνάρτησης =timeit()=.

** Άσκηση 7


#+begin_center
Αναφορές
#+end_center
#+begin_center
[1] Stiff, J., & Somani, S. (n.d.). FAQ | MATLAB Wiki | Fandom. MATLAB Wiki. Retrieved February 2, 2023, from [[https://matlab.fandom.com/wiki/FAQ#Why_is_0.3_-_0.2_-_0.1_(or_similar)_not_equal_to_zero?]]
[2] Harvey Mudd College. (2019). Gram-Schmidt Method. Gram-Schmidt Method – Calculus Tutorials. Retrieved February 6, 2023, from https://math.hmc.edu/calculus/hmc-mathematics-calculus-online-tutorials/linear-algebra/gram-schmidt-method/
[3] Mathworks. (2012, September 19). Vectorization - MATLAB & Simulink. MathWorks. Retrieved February 6, 2023, from https://www.mathworks.com/help/matlab/matlab_prog/vectorization.html

#+end_center


